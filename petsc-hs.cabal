name:                petsc-hs
version:             0.1.0.0
synopsis:            Haskell bindings for the scientific computation library PETSc
description:         Lambdas and large linear systems, oh my         
homepage:            https://github.com/ocramz/petsc-hs
license:             LGPL-3
license-file:        LICENSE
author:              Marco Zocca <zocca.marco@gmail.com>
maintainer:          Marco Zocca <zocca.marco@gmail.com>
copyright:           (c) 2015 Marco Zocca
category:            Numerical
build-type:          Simple
extra-source-files:  README.md
cabal-version:       >=1.10

source-repository head
  type:     git
  location: https://github.com/ocramz/petsc-hs.git 

-- flag usePkgConfig
--   description:  Use pkg-config to check for lib. dependencies
--   default: True

-- flag complexScalars
--   description: Default PetscScalar to (Complex CDouble)
--   default: False


library
  exposed-modules:     Numerical.PETSc, 
                       Numerical.PETSc.Spec
                       Numerical.PETSc.Test
  other-modules:       Numerical.PETSc.Internal.Exception
                       Numerical.PETSc.Internal.InlineC                         
                       Numerical.PETSc.Internal.Internal
                       Numerical.PETSc.Internal.PutGet
                       Numerical.PETSc.Internal.PutGet.IS
                       Numerical.PETSc.Internal.PutGet.Vec
                       Numerical.PETSc.Internal.PutGet.Mat
                       Numerical.PETSc.Internal.PutGet.DM
                       Numerical.PETSc.Internal.PutGet.PC
                       Numerical.PETSc.Internal.PutGet.KSP
                       Numerical.PETSc.Internal.PutGet.SNES
                       Numerical.PETSc.Internal.PutGet.TS
                       Numerical.PETSc.Internal.PutGet.TAO
                       Numerical.PETSc.Internal.PutGet.Viewer
                       Numerical.PETSc.Internal.PutGet.PetscMisc
                       Numerical.PETSc.Internal.PutGet.SlepcMisc
                       Numerical.PETSc.Internal.PutGet.EPS
                       Numerical.PETSc.Internal.PutGet.SVD
                       Numerical.PETSc.Internal.PutGet
                       Numerical.PETSc.Internal.Sparse
                       Numerical.PETSc.Internal.Storable.Common
                       Numerical.PETSc.Internal.Storable.Vector
                       Numerical.PETSc.Internal.Types
                       Numerical.PETSc.Internal.Utils
  build-depends:       base >=4.7,
                       template-haskell,
                       containers >=0.5 && <0.6, 
                       QuickCheck >=2.7,
                       hspec,
                       bytestring >=0.10 && <0.11, 
                       transformers,
                       transformers-base,
                       contravariant,
                       monad-control,
                       comonad,
                       semigroupoids,
                       profunctors,
                       free,
                       inline-c > 0.5.0.0,
                       vector,
                       mtl,
                       async,
                       either,
                       StateVar,
                       mmorph,
                       prelude-extras,
                       void,
                       MonadRandom,
                       managed,
                       storable-complex,
                       split,
                       ad
  hs-source-dirs:      src/
  default-language:    Haskell2010
  ghc-options:         -j2 -O2 -Wall
  extra-libraries:     petsc, mpich, slepc



executable petsc-example
  build-depends:       base >=4.7,
                       petsc-hs
  default-language:    Haskell2010
  main-is:             Main.hs
  hs-source-dirs:      test
  ghc-options:         -j2 -O2 -Wall
  c-sources:           src/Numerical/PETSc/Internal/InlineC.c
  extra-libraries:     petsc, mpich, slepc


executable petsc-valgrind
  build-depends:       base >=4.7,
                       petsc-hs
  default-language:    Haskell2010
  main-is:             Grind.hs
  hs-source-dirs:      test
-- ghc-options:         -j2 -O0 -Wall -optc -g -optc -O0
  ghc-options:         -j2 -O0 -Wall
  cc-options:          -g -O0
  c-sources:           src/Numerical/PETSc/Internal/InlineC.c
  extra-libraries:     petsc, mpich, slepc

-- executable foo
--   main-is:             Main.hs, Foo.hs, Bar.hs
--   hs-source-dirs:      src
--   -- Here the corresponding C sources must be listed for every module
--   -- that uses C code.  In this example, Main.hs and Bar.hs do, but
--   -- Foo.hs does not.
--   c-sources:           src/Main.c, src/Bar.c
--   -- These flags will be passed to the C compiler
--   cc-options:          -Wall -O2
--   -- Libraries to link the code with.
--   extra-libraries:     m
--   ...

-- If we were to compile the above manually we could do:

-- $ ghc -c Main.hs
-- $ cc -c Main.c -o Main_c.o
-- $ ghc Foo.hs
-- $ ghc Bar.hs
-- $ cc -c Bar.c -o Bar_c.o
-- $ ghc Main.o Foo.o Bar.o Main_c.o Bar_c.o -lm -o Main